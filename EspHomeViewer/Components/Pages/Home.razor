@page "/"

@using EspHomeViewer.Components.Control;

<ContextMenu Id="TotalMenu">
    <MenuItemDay OnMenuGraphClickAsync="@OnMenuGraphClickAsync" />
</ContextMenu>

<ContextMenu Id="DeviceMenu">
    @foreach (var status in EsphomeOptions.CurrentValue.StatusInfo)
    {
        <SubMenuDay StatusInfo="@status" OnMenuGraphClickAsync="@OnMenuGraphClickAsync"></SubMenuDay>
    }
</ContextMenu>

<PageTitle>S31 Data</PageTitle>
<table>
    @foreach (var group in EsphomeOptions.CurrentValue.GroupInfo)
    {
        <tr>
            <td>
                <ContextMenuTrigger MenuId="TotalMenu" MouseButtonTrigger="MouseButtonTrigger.Left" Id="@group.Id">
                    @group.Title
                </ContextMenuTrigger>
            </td>
            <td><TotalOutput GroupInfo="@group.Name" Unit="@group.Unit" Subscriber="subscriber" /></td>
        </tr>
    }
</table>

<table>
    <tr>
        <td>
            Device
        </td>
        @foreach (var status in EsphomeOptions.CurrentValue.StatusInfo.Where(x => !x.Hidden))
        {
            <td>@status.Name</td>
        }
    </tr>
    @foreach (var device in EsphomeOptions.CurrentValue.DeviceInfo)
    {
        <tr>
            <td>
                <ContextMenuTrigger Data="@device.DeviceName" MenuId="DeviceMenu" MouseButtonTrigger="MouseButtonTrigger.Left" Id="@device.Name">
                    @device.DeviceName
                </ContextMenuTrigger>
            </td>
            @foreach (var status in EsphomeOptions.CurrentValue.StatusInfo.Where(x => !x.Hidden))
            {
                <td><SingleInput DeviceName="@device.DeviceName" Name="@status.Name" Unit="@status.Unit" Subscriber="subscriber" /></td>
            }
        </tr>
    }
</table>

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {

        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);

    }

    window.observeAllTables = () => {

        const observedElements = new WeakMap();

        function observeParagraph(p) {
            if (observedElements.has(p)) return;
            observedElements.set(p, true);

            const observer = new MutationObserver(mutations => {
                for (const mutation of mutations) {
                    if (mutation.type === "characterData") {
                        const td = p.closest("td");

                        if (td && !observedElements.has(td)) {
                            observedElements.set(td, true);

                            td.classList.add("highlight");
                            setTimeout(() => requestAnimationFrame(() => {
                                td.classList.remove("highlight");
                                observedElements.delete(td); // Clean up
                            }), 1000);
                        }
                    }
                }
            });

            observer.observe(p, { subtree: true, characterData: true });
        }

        function observeTable(table) {
            if (observedElements.has(table)) return;
            observedElements.set(table, true);

            table.querySelectorAll("p").forEach(observeParagraph);
        }

        document.querySelectorAll("table").forEach(observeTable);

    };


</script>